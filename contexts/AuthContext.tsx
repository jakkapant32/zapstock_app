import AsyncStorage from '@react-native-async-storage/async-storage';
import React, { createContext, ReactNode, useContext, useEffect, useState } from 'react';

import { API_ENDPOINTS, BASE_URL } from '../constants/ApiConfig';

const API_BASE_URL = BASE_URL + '/api';

interface User {
  id: string;
  username: string;
  email: string;
  fullName: string;
  role: string;
  phone?: string;
  address?: string;
  profileImage?: string;
  imageUrl?: string; // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° backend
}

interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (token: string, userData: User) => Promise<void>;
  logout: () => Promise<void>;
  checkAuthStatus: () => Promise<void>;
  register: (fullName: string, username: string, email: string, password: string) => Promise<{ success: boolean; message?: string }>;
  updateProfile: (profileData: Partial<User>) => Promise<{ success: boolean; message?: string }>;
  uploadProfileImage: (imageBase64: string) => Promise<{ success: boolean; url?: string; message?: string }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const isAuthenticated = !!user;

  const getStoredToken = async (): Promise<string | null> => {
    try {
      return await AsyncStorage.getItem('authToken');
    } catch (error) {
      console.error('Error getting token:', error);
      return null;
    }
  };

  const checkAuthStatus = async () => {
    try {
      const token = await getStoredToken();
      if (!token) {
        console.log('‚ùå No token found, setting loading to false');
        setIsLoading(false);
        return;
      }

      console.log('üîç Checking auth status with token...');
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API call
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 5000); // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      
      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.AUTH.VERIFY}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      console.log('üì° API response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('üì° API response result:', result);
        
        if (result.success && result.user) {
          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          const currentUser = user;
          const existingProfileImage = currentUser?.profileImage;
          
          // Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
          console.log('üîç Full API response user object:');
          console.log('  - result.user:', result.user);
          console.log('  - result.user keys:', Object.keys(result.user));
          console.log('  - result.user values:', Object.values(result.user));
          
          const userData: User = {
            id: result.user.id,
            username: result.user.username,
            email: result.user.email || '',
            fullName: result.user.fullName || '',
            role: result.user.role,
            phone: result.user.phone || undefined,
            address: result.user.address || undefined,
            profileImage: result.user.image_url || result.user.imageUrl || existingProfileImage || undefined,
            imageUrl: result.user.image_url || result.user.imageUrl || existingProfileImage || undefined,
          };
          
          console.log('üì± User data from API:');
          console.log('  - phone:', result.user.phone);
          console.log('  - address:', result.user.address);
          console.log('  - phone type:', typeof result.user.phone);
          console.log('  - address type:', typeof result.user.address);
          console.log('  - phone length:', result.user.phone?.length || 0);
          console.log('  - address length:', result.user.address?.length || 0);
          console.log('  - phone truthy:', !!result.user.phone);
          console.log('  - address truthy:', !!result.user.address);
          console.log('  - imageUrl:', result.user.image_url || result.user.imageUrl);
          console.log('  - imageUrl type:', typeof (result.user.image_url || result.user.imageUrl));
          
          console.log('üñºÔ∏è Profile image handling:');
          console.log('  - From API:', result.user.image_url || result.user.imageUrl);
          console.log('  - Existing:', existingProfileImage);
          console.log('  - Final:', userData.profileImage);
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AsyncStorage ‡∏î‡πâ‡∏ß‡∏¢
          await AsyncStorage.setItem('userData', JSON.stringify(userData));
          setUser(userData);
          console.log('‚úÖ User data updated from API:', userData);
        } else {
          console.log('‚ö†Ô∏è API response not successful, keeping existing user data');
          // ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
      } else {
        console.log('‚ö†Ô∏è API response not ok, keeping existing user data');
        // ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ñ‡πâ‡∏≤ API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      }
    } catch (error) {
      console.error('‚ùå Failed to check auth status:', error);
      
      if (error.name === 'AbortError') {
        console.log('‚è∞ API call timeout, setting loading to false');
      } else {
        console.log('‚ö†Ô∏è Error occurred, but keeping existing user data');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const login = async (token: string, userData: User) => {
    try {
      await AsyncStorage.setItem('authToken', token);
      await AsyncStorage.setItem('userData', JSON.stringify(userData));
      setUser(userData);
    } catch (error) {
      console.error('Error storing auth data:', error);
      throw error;
    }
  };

  const logout = async () => {
    try {
      const token = await getStoredToken();
      if (token) {
        await fetch(`${API_BASE_URL}${API_ENDPOINTS.AUTH.LOGOUT}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ token }),
        });
      }
      
      await AsyncStorage.removeItem('authToken');
      await AsyncStorage.removeItem('userData');
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
      // ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πá‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
      await AsyncStorage.removeItem('authToken');
      await AsyncStorage.removeItem('userData');
      setUser(null);
    }
  };

  const register = async (fullName: string, username: string, email: string, password: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.AUTH.REGISTER}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fullName, username, email, password }),
      });
      const result = await response.json();
      if (response.ok && result.success) {
        return { success: true };
      } else {
        return { success: false, message: result.message || '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
      }
    } catch (error) {
      console.error('Register error:', error);
      return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å' };
    }
  };

  const updateProfile = async (profileData: Partial<User>) => {
    try {
      const token = await getStoredToken();
      if (!token) {
        console.log('‚ùå No auth token found');
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' };
      }

      if (!user) {
        console.log('‚ùå No user data found');
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' };
      }

      console.log('üìù Updating profile for user ID:', user.id);
      console.log('üìù Profile data to send:', profileData);
      console.log('üîó API endpoint:', `${API_BASE_URL}/profile/${user.id}`);

      // ‡πÅ‡∏õ‡∏•‡∏á field names ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const backendProfileData = {
        fullname: profileData.fullName,        // backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'fullname'
        email: profileData.email,              // backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'email'
        phone: profileData.phone,              // backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'phone'
        address: profileData.address,          // backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'address'
        imageUrl: profileData.imageUrl,        // backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 'imageUrl'
      };

      console.log('üîÑ Converted data for backend:', backendProfileData);
      console.log('üîó Full API URL:', `${API_BASE_URL}/profile/${user.id}`);
      console.log('üîë Auth token:', token.substring(0, 20) + '...');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ backend
      console.log('üîç Backend data validation:');
      console.log('  - fullname:', backendProfileData.fullname, '| type:', typeof backendProfileData.fullname, '| length:', backendProfileData.fullname?.length || 0);
      console.log('  - email:', backendProfileData.email, '| type:', typeof backendProfileData.email, '| length:', backendProfileData.email?.length || 0);
      console.log('  - phone:', backendProfileData.phone, '| type:', typeof backendProfileData.phone, '| length:', backendProfileData.phone?.length || 0);
      console.log('  - address:', backendProfileData.address, '| type:', typeof backendProfileData.address, '| length:', backendProfileData.address?.length || 0);
      console.log('  - imageUrl:', backendProfileData.imageUrl, '| type:', typeof backendProfileData.imageUrl, '| length:', backendProfileData.imageUrl?.length || 0);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• undefined ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const undefinedFields = Object.entries(backendProfileData)
        .filter(([key, value]) => value === undefined)
        .map(([key]) => key);
      
      if (undefinedFields.length > 0) {
        console.log('‚ö†Ô∏è Fields with undefined values:', undefinedFields);
      } else {
        console.log('‚úÖ All fields have values');
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.PROFILE.UPDATE}/${user.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(backendProfileData),
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', response.headers);
      console.log('üì° Response ok:', response.ok);
      console.log('üì° Response statusText:', response.statusText);

      const result = await response.json();
      console.log('üì° Response body:', result);
      console.log('üì° Response success:', result.success);
      console.log('üì° Response message:', result.message);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      if (result.user) {
        console.log('üë§ Updated user data from backend:', result.user);
        console.log('üîç Backend returned fields:');
        Object.entries(result.user).forEach(([key, value]) => {
          console.log(`  - ${key}:`, value, '| type:', typeof value);
        });
      }
      
              if (response.ok && result.success) {
          console.log('‚úÖ Profile updated successfully');
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô local state ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          const updatedUser = { 
            ...user, 
            ...profileData,
            profileImage: profileData.imageUrl || user.profileImage // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          };
          setUser(updatedUser);
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô AsyncStorage
          await AsyncStorage.setItem('userData', JSON.stringify(updatedUser));
          
          console.log('üë§ Updated user data:', updatedUser);
          return { success: true, message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
        } else {
        console.log('‚ùå Profile update failed:', result.message);
        console.log('‚ùå Full error response:', result);
        return { 
          success: false, 
          message: result.message || '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
        };
      }
    } catch (error) {
      console.error('‚ùå Update profile error:', error);
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' 
      };
    }
  };

  const uploadProfileImage = async (imageBase64: string) => {
    try {
      const token = await getStoredToken();
      if (!token) {
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' };
      }

      console.log('üì§ Uploading profile image...');
      console.log('üñºÔ∏è Image data length:', imageBase64.length);
      console.log('üñºÔ∏è Image data type:', typeof imageBase64);
      console.log('üñºÔ∏è Image data preview:', imageBase64.substring(0, 50) + '...');

      const requestBody = { 
        imageBase64: imageBase64,  // ‡πÉ‡∏ä‡πâ imageBase64 ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        type: 'profile'  // ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      };

      console.log('üì§ Request body:', requestBody);

      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.UPLOAD}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      const result = await response.json();
      console.log('üì° Response status:', response.status);
      console.log('üì° Response result:', result);
      
      if (response.ok && result.success) {
        console.log('‚úÖ Image uploaded successfully:', result.url);
        return { 
          success: true, 
          url: result.url,
          message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
        };
      } else {
        console.log('‚ùå Image upload failed:', result.message);
        console.log('‚ùå Response status:', response.status);
        console.log('‚ùå Full response:', result);
        return { 
          success: false, 
          message: result.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
        };
      }
    } catch (error) {
      console.error('‚ùå Image upload error:', error);
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' 
      };
    }
  };

  useEffect(() => {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AsyncStorage ‡∏Å‡πà‡∏≠‡∏ô
    const loadStoredUserData = async () => {
      try {
        console.log('üîç Loading stored user data...');
        const storedUserData = await AsyncStorage.getItem('userData');
        if (storedUserData) {
          const userData = JSON.parse(storedUserData);
          console.log('üë§ Loaded user data from storage:', userData);
          console.log('üñºÔ∏è Profile image from storage:', userData.profileImage);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (userData.id && userData.username && userData.email) {
            setUser(userData);
            console.log('‚úÖ User data loaded from storage successfully');
            setIsLoading(false); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ loading ‡πÄ‡∏õ‡πá‡∏ô false
            return;
          } else {
            console.log('‚ö†Ô∏è Stored data incomplete, calling API...');
          }
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô storage ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        console.log('üì° No stored data or incomplete, calling API...');
        checkAuthStatus();
      } catch (error) {
        console.error('Error loading stored user data:', error);
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
        checkAuthStatus();
      }
    };

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á
    const timeoutId = setTimeout(() => {
      console.log('‚è∞ Auth loading timeout, setting loading to false');
      setIsLoading(false);
    }, 10000); // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    loadStoredUserData();

    return () => {
      clearTimeout(timeoutId);
    };
  }, []);

  const value: AuthContextType = {
    user,
    isLoading,
    isAuthenticated,
    login,
    logout,
    checkAuthStatus,
    register,
    updateProfile,
    uploadProfileImage,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}; 